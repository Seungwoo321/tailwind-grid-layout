{"version":3,"file":"ResponsiveGridContainer-Cp1aiVj_.js","sources":["../../../src/components/ResponsiveGridContainer.tsx"],"sourcesContent":["import { useState, useEffect, useMemo } from 'react'\nimport { GridContainer } from './GridContainer'\nimport type { GridItem, GridContainerProps } from '../types'\n\nexport interface BreakpointLayouts {\n  [breakpoint: string]: GridItem[]\n}\n\nexport interface ResponsiveGridContainerProps extends Omit<GridContainerProps, 'items' | 'cols' | 'onLayoutChange'> {\n  layouts: BreakpointLayouts\n  breakpoints?: { [breakpoint: string]: number }\n  cols?: { [breakpoint: string]: number }\n  onLayoutChange?: (layout: GridItem[], layouts: BreakpointLayouts) => void\n  onBreakpointChange?: (newBreakpoint: string, cols: number) => void\n  width?: number // For WidthProvider support\n}\n\nconst defaultBreakpoints = {\n  lg: 1200,\n  md: 996,\n  sm: 768,\n  xs: 480,\n  xxs: 0,\n}\n\nconst defaultCols = {\n  lg: 12,\n  md: 10,\n  sm: 6,\n  xs: 4,\n  xxs: 2,\n}\n\nexport function ResponsiveGridContainer({\n  layouts,\n  breakpoints = defaultBreakpoints,\n  cols = defaultCols,\n  onLayoutChange,\n  onBreakpointChange,\n  width,\n  ...props\n}: ResponsiveGridContainerProps) {\n  const [currentBreakpoint, setCurrentBreakpoint] = useState<string>('lg')\n  const [currentCols, setCurrentCols] = useState(\n    typeof cols === 'object' && cols.lg ? cols.lg : 12\n  )\n\n  // Get sorted breakpoints\n  const sortedBreakpoints = useMemo(() => {\n    return Object.entries(breakpoints).sort((a, b) => b[1] - a[1])\n  }, [breakpoints])\n\n  // Calculate current breakpoint based on window width\n  const getBreakpoint = (width: number) => {\n    // Default to 'lg' if no breakpoints are sorted\n    if (sortedBreakpoints.length === 0) return 'lg'\n    \n    const lastEntry = sortedBreakpoints[sortedBreakpoints.length - 1]\n    // lastEntry cannot be undefined here since we checked length > 0\n    let breakpoint = lastEntry![0]\n    \n    for (const [bp, minWidth] of sortedBreakpoints) {\n      if (width >= minWidth) {\n        breakpoint = bp\n        break\n      }\n    }\n    \n    return breakpoint\n  }\n\n  // Handle window resize\n  useEffect(() => {\n    const handleResize = () => {\n      const containerWidth = width ?? window.innerWidth\n      const newBreakpoint = getBreakpoint(containerWidth)\n      if (newBreakpoint !== currentBreakpoint) {\n        setCurrentBreakpoint(newBreakpoint)\n        const newCols = (typeof cols === 'object' && cols[newBreakpoint]) || \n                        (defaultCols as Record<string, number>)[newBreakpoint] || \n                        12\n        setCurrentCols(newCols)\n        onBreakpointChange?.(newBreakpoint, newCols)\n      }\n    }\n\n    handleResize() // Set initial breakpoint\n    \n    // Only listen to window resize if width is not provided\n    if (width === undefined) {\n      window.addEventListener('resize', handleResize)\n      return () => window.removeEventListener('resize', handleResize)\n    }\n    return undefined\n  }, [currentBreakpoint, cols, sortedBreakpoints, onBreakpointChange, width])\n\n  // Get current layout\n  const currentLayout = layouts[currentBreakpoint] || []\n\n  // Handle layout change\n  const handleLayoutChange = (newLayout: GridItem[]) => {\n    const newLayouts = {\n      ...layouts,\n      [currentBreakpoint]: newLayout,\n    }\n    onLayoutChange?.(newLayout, newLayouts)\n  }\n\n  return (\n    <GridContainer\n      {...props}\n      items={currentLayout}\n      cols={currentCols}\n      onLayoutChange={handleLayoutChange}\n    />\n  )\n}"],"names":["useState","useMemo","width","useEffect","jsxDEV"],"mappings":"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"}