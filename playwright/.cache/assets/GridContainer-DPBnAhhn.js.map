{"version":3,"file":"GridContainer-DPBnAhhn.js","sources":["../../../src/utils/grid.ts","../../../src/components/GridContainer.tsx"],"sourcesContent":["import { GridItem, GridPosition } from '../types'\n\nexport function calculateGridPosition(\n  x: number,\n  y: number,\n  cols: number,\n  rowHeight: number,\n  gap: number,\n  containerWidth: number,\n  margin?: [number, number]\n): { col: number; row: number } {\n  const horizontalMargin = margin ? margin[0] : gap\n  const verticalMargin = margin ? margin[1] : gap\n  const colWidth = (containerWidth - horizontalMargin * (cols - 1)) / cols\n  const col = Math.round(x / (colWidth + horizontalMargin))\n  const row = Math.round(y / (rowHeight + verticalMargin))\n  \n  return {\n    col: Math.max(0, col),\n    row: Math.max(0, row)\n  }\n}\n\nexport function getPixelPosition(\n  item: GridPosition,\n  cols: number,\n  rowHeight: number,\n  gap: number,\n  containerWidth: number,\n  margin?: [number, number]\n): { left: number; top: number; width: number; height: number } {\n  const horizontalMargin = margin ? margin[0] : gap\n  const verticalMargin = margin ? margin[1] : gap\n  const colWidth = (containerWidth - horizontalMargin * (cols - 1)) / cols\n  \n  return {\n    left: item.x * (colWidth + horizontalMargin),\n    top: item.y * (rowHeight + verticalMargin),\n    width: item.w * colWidth + (item.w - 1) * horizontalMargin,\n    height: item.h * rowHeight + (item.h - 1) * verticalMargin\n  }\n}\n\nexport function checkCollision(\n  item1: GridPosition,\n  item2: GridPosition\n): boolean {\n  return !(\n    item1.x + item1.w <= item2.x ||\n    item2.x + item2.w <= item1.x ||\n    item1.y + item1.h <= item2.y ||\n    item2.y + item2.h <= item1.y\n  )\n}\n\nexport function findFreeSpace(\n  items: GridItem[],\n  itemToPlace: GridPosition,\n  cols: number,\n  excludeId?: string\n): GridPosition {\n  const itemsToCheck = excludeId \n    ? items.filter(item => item.id !== excludeId)\n    : items\n  \n  // First, try to place at the requested position\n  const hasCollisionAtOriginal = itemsToCheck.some(item => \n    checkCollision(itemToPlace, item)\n  )\n  \n  if (!hasCollisionAtOriginal) {\n    return itemToPlace\n  }\n  \n  // If there's collision, find the nearest free space\n  let y = itemToPlace.y\n  \n  while (true) {\n    for (let x = 0; x <= cols - itemToPlace.w; x++) {\n      const testPosition = { ...itemToPlace, x, y }\n      const hasCollision = itemsToCheck.some(item => \n        checkCollision(testPosition, item)\n      )\n      \n      if (!hasCollision) {\n        return testPosition\n      }\n    }\n    y++\n  }\n}\n\nexport function compactLayout(\n  items: GridItem[],\n  cols: number,\n  compactType: 'vertical' | 'horizontal' | null = 'vertical'\n): GridItem[] {\n  if (!compactType) return items\n  \n  // Separate static and non-static items\n  const staticItems = items.filter(item => item.static)\n  const nonStaticItems = items.filter(item => !item.static)\n  \n  // Sort non-static items based on compact type\n  const sorted = [...nonStaticItems].sort((a, b) => {\n    if (compactType === 'horizontal') {\n      // For horizontal compacting, sort by x then y\n      if (a.x === b.x) return a.y - b.y\n      return a.x - b.x\n    } else {\n      // For vertical compacting, sort by y then x\n      if (a.y === b.y) return a.x - b.x\n      return a.y - b.y\n    }\n  })\n  \n  const compacted: GridItem[] = [...staticItems]\n  \n  sorted.forEach(item => {\n    if (compactType === 'vertical') {\n      // Find the topmost position for this item\n      let minY = 0\n      let found = false\n      \n      // Try each row from top to bottom\n      for (let y = 0; !found; y++) {\n        const testItem = { ...item, y, x: item.x }\n        const hasCollision = compacted.some(placed => \n          checkCollision(testItem, placed)\n        )\n        \n        if (!hasCollision) {\n          minY = y\n          found = true\n        }\n      }\n      \n      compacted.push({ ...item, y: minY })\n    } else if (compactType === 'horizontal') {\n      // Find the leftmost position for this item\n      let minX = 0\n      let found = false\n      \n      // Try each column from left to right\n      for (let x = 0; x <= cols - item.w && !found; x++) {\n        const testItem = { ...item, x, y: item.y }\n        const hasCollision = compacted.some(placed => \n          checkCollision(testItem, placed)\n        )\n        \n        if (!hasCollision) {\n          minX = x\n          found = true\n        }\n      }\n      \n      compacted.push({ ...item, x: minX })\n    }\n  })\n  \n  return compacted\n}\n\nexport function moveItems(\n  layout: GridItem[],\n  item: GridItem,\n  _cols: number,\n  _originalItem?: GridItem\n): GridItem[] {\n  const compareWith = { ...item }\n  let movedLayout = [...layout]\n  \n  // Update the position of the moving item in the layout\n  const itemIndex = movedLayout.findIndex(l => l.id === item.id)\n  if (itemIndex !== -1) {\n    movedLayout[itemIndex] = compareWith\n  }\n  \n  // React Grid Layout style: check for collisions\n  const getCollisions = (checkItem: GridItem): GridItem[] => {\n    return movedLayout.filter(l => {\n      if (l.id === checkItem.id || l.static) return false\n      return checkCollision(checkItem, l)\n    })\n  }\n  \n  // Process collisions iteratively until no more collisions\n  const processedIds = new Set<string>()\n  const itemsToMove: GridItem[] = [compareWith]\n  \n  while (itemsToMove.length > 0) {\n    const currentItem = itemsToMove.shift()!\n    if (processedIds.has(currentItem.id)) continue\n    processedIds.add(currentItem.id)\n    \n    const collisions = getCollisions(currentItem)\n    \n    for (const collision of collisions) {\n      if (processedIds.has(collision.id)) continue\n      \n      // Calculate new position for the colliding item\n      const newY = currentItem.y + currentItem.h\n      const movedCollision = { ...collision, y: newY }\n      \n      // Update in layout\n      const collisionIndex = movedLayout.findIndex(l => l.id === collision.id)\n      if (collisionIndex !== -1) {\n        movedLayout[collisionIndex] = movedCollision\n        // Add to queue to check for further collisions\n        itemsToMove.push(movedCollision)\n      }\n    }\n  }\n  \n  return movedLayout\n}\n\nexport function getAllCollisions(\n  layout: GridItem[],\n  item: GridItem\n): GridItem[] {\n  return layout.filter(l => l.id !== item.id && checkCollision(l, item))\n}","'use client'\n\nimport React, { useRef, useState, useCallback, useEffect } from 'react'\nimport { cn } from '../utils/cn'\nimport { GridItem, DragState, ResizeState, GridContainerProps } from '../types'\nimport { getPixelPosition, calculateGridPosition, compactLayout, moveItems, getAllCollisions } from '../utils/grid'\nimport { GridItemComponent } from './GridItem'\n\nexport const GridContainer: React.FC<GridContainerProps> = ({\n  cols = 12,\n  rowHeight = 60,\n  gap = 16,\n  margin,\n  containerPadding = [16, 16],\n  maxRows,\n  isDraggable = true,\n  isResizable = true,\n  preventCollision = false,\n  allowOverlap = false,\n  isBounded = true,\n  compactType = 'vertical',\n  resizeHandles = ['se'],\n  draggableCancel,\n  autoSize = true,\n  verticalCompact: _verticalCompact = true,\n  transformScale: _transformScale = 1,\n  droppingItem,\n  onLayoutChange,\n  onDragStart,\n  onDrag,\n  onDragStop,\n  onResizeStart,\n  onResize,\n  onResizeStop,\n  onDrop: _onDrop,\n  items,\n  children,\n  className,\n  style\n}) => {\n  const containerRef = useRef<HTMLDivElement>(null)\n  const [containerWidth, setContainerWidth] = useState(0)\n  const [layout, setLayout] = useState<GridItem[]>(items)\n  \n  const [dragState, setDragState] = useState<DragState>({\n    isDragging: false,\n    draggedItem: null,\n    dragOffset: { x: 0, y: 0 },\n    placeholder: null,\n    originalPosition: null,\n    currentMousePos: undefined\n  })\n  \n  const [resizeState, setResizeState] = useState<ResizeState>({\n    isResizing: false,\n    resizedItem: null,\n    resizeHandle: null,\n    startSize: { w: 0, h: 0 },\n    startPos: { x: 0, y: 0 }\n  })\n\n  // Update container width on mount and resize\n  useEffect(() => {\n    const updateWidth = () => {\n      if (containerRef.current) {\n        setContainerWidth(containerRef.current.offsetWidth - containerPadding[0] * 2)\n      }\n    }\n    \n    updateWidth()\n    window.addEventListener('resize', updateWidth)\n    return () => window.removeEventListener('resize', updateWidth)\n  }, [containerPadding])\n\n  // Update layout when items prop changes (merge with existing layout)\n  useEffect(() => {\n    setLayout(prevLayout => {\n      // Create a map of existing items with their current positions\n      const existingItemsMap = new Map(prevLayout.map(item => [item.id, item]))\n      \n      // Merge new items with existing positions\n      const mergedLayout = items.map(item => {\n        const existing = existingItemsMap.get(item.id)\n        if (existing) {\n          // Keep existing position/size for items that already exist\n          return {\n            ...item,\n            x: existing.x,\n            y: existing.y,\n            w: existing.w,\n            h: existing.h\n          }\n        }\n        // New items keep their original position\n        return item\n      })\n      \n      // Compact the layout to handle any new items\n      return compactLayout(mergedLayout, cols, compactType)\n    })\n  }, [items, cols, compactType])\n\n  // Compact layout after changes\n  const updateLayout = useCallback((newLayout: GridItem[]) => {\n    const compacted = compactLayout(newLayout, cols, compactType)\n    setLayout(compacted)\n    onLayoutChange?.(compacted)\n  }, [cols, compactType, onLayoutChange])\n\n  // Handle drag start\n  const handleDragStart = useCallback((itemId: string, e: React.MouseEvent) => {\n    // GridItem already checks isDraggable before calling this function\n    const item = layout.find(i => i.id === itemId)!\n    // GridItem already checks item.isDraggable before calling this function\n    \n    const rect = e.currentTarget.getBoundingClientRect()\n    \n    const newDragState = {\n      isDragging: true,\n      draggedItem: itemId,\n      dragOffset: {\n        x: e.clientX - rect.left,\n        y: e.clientY - rect.top\n      },\n      placeholder: { ...item },\n      originalPosition: { ...item },\n      currentMousePos: { x: e.clientX, y: e.clientY }\n    }\n    \n    setDragState(newDragState)\n    \n    // Call onDragStart callback\n    if (onDragStart) {\n      const element = e.currentTarget as HTMLElement\n      onDragStart(layout, item, item, { ...item }, e.nativeEvent, element)\n    }\n    \n    e.preventDefault()\n  }, [isDraggable, layout, onDragStart])\n\n  // Handle drag move\n  const handleDragMove = useCallback((e: MouseEvent) => {\n    // This function is only called when dragging is active\n    if (!containerRef.current) return\n    \n    const containerRect = containerRef.current.getBoundingClientRect()\n    const x = e.clientX - containerRect.left - dragState.dragOffset.x - containerPadding[0]\n    const y = e.clientY - containerRect.top - dragState.dragOffset.y - containerPadding[1]\n    \n    const { col, row } = calculateGridPosition(x, y, cols, rowHeight, gap, containerWidth, margin)\n    \n    const draggedItem = layout.find(i => i.id === dragState.draggedItem)\n    if (!draggedItem || draggedItem.static) return\n    \n    let newPosition = {\n      x: Math.max(0, Math.min(cols - draggedItem.w, col)),\n      y: Math.max(0, row),\n      w: draggedItem.w,\n      h: draggedItem.h\n    }\n    \n    // Apply maxRows constraint\n    if (maxRows && newPosition.y + newPosition.h > maxRows) {\n      newPosition.y = Math.max(0, maxRows - newPosition.h)\n    }\n    \n    // Apply bounded constraints\n    if (isBounded) {\n      newPosition.x = Math.max(0, Math.min(cols - newPosition.w, newPosition.x))\n      newPosition.y = Math.max(0, newPosition.y)\n    }\n    \n    // Check for collisions\n    const tempLayout = layout.map(item => \n      item.id === dragState.draggedItem ? { ...item, ...newPosition } : item\n    )\n    \n    // If prevent collision is enabled and allowOverlap is false, don't allow overlapping\n    if (preventCollision && !allowOverlap) {\n      const collisions = getAllCollisions(tempLayout, { ...draggedItem, ...newPosition })\n      const staticCollisions = collisions.filter(item => item.static)\n      \n      if (staticCollisions.length > 0) {\n        // Don't update state or call callbacks if colliding with static items\n        return\n      }\n    }\n    \n    // Move other items if needed\n    let finalLayout = tempLayout\n    if (!preventCollision && !allowOverlap) {\n      const itemWithNewPosition = { ...draggedItem, ...newPosition }\n      // originalPosition is always set when drag starts\n      const originalPosition = dragState.originalPosition\n      const originalWithId = { ...draggedItem, ...originalPosition }\n      finalLayout = moveItems(tempLayout, itemWithNewPosition, cols, originalWithId)\n    }\n    \n    // Compact the layout\n    const compactedLayout = compactLayout(finalLayout, cols, compactType)\n    setLayout(compactedLayout)\n    \n    setDragState(prev => ({\n      ...prev,\n      placeholder: newPosition,\n      currentMousePos: { x: e.clientX, y: e.clientY }\n    }))\n    \n    // Call onDrag callback\n    if (onDrag && dragState.originalPosition) {\n      const element = containerRef.current?.querySelector(`[data-grid-id=\"${dragState.draggedItem}\"]`) as HTMLElement\n      if (element) {\n        onDrag(compactedLayout, { ...draggedItem, ...dragState.originalPosition }, { ...draggedItem, ...newPosition }, { ...draggedItem, ...newPosition }, e, element)\n      }\n    }\n  }, [dragState, layout, cols, rowHeight, gap, containerWidth, containerPadding, preventCollision, allowOverlap, isBounded, compactType, margin, maxRows, onDrag])\n\n  // Handle drag end\n  const handleDragEnd = useCallback((e: MouseEvent) => {\n    // This function is only called when dragging is active\n    \n    const draggedItem = layout.find(i => i.id === dragState.draggedItem)\n    if (draggedItem && onDragStop && dragState.originalPosition) {\n      const element = containerRef.current?.querySelector(`[data-grid-id=\"${dragState.draggedItem}\"]`) as HTMLElement\n      if (element) {\n        onDragStop(layout, { ...draggedItem, ...dragState.originalPosition }, draggedItem, { ...draggedItem, ...dragState.placeholder }, e, element)\n      }\n    }\n    \n    // Use the current layout state which was updated during dragging\n    updateLayout(layout)\n    \n    setDragState({\n      isDragging: false,\n      draggedItem: null,\n      dragOffset: { x: 0, y: 0 },\n      placeholder: null,\n      originalPosition: null,\n      currentMousePos: undefined\n    })\n  }, [dragState, layout, updateLayout, onDragStop])\n\n  // Handle resize start\n  const handleResizeStart = useCallback((\n    itemId: string,\n    handle: ResizeState['resizeHandle'],\n    e: React.MouseEvent\n  ) => {\n    // ResizeHandle component already checks isResizable before calling this\n    const item = layout.find(i => i.id === itemId)!\n    \n    setResizeState({\n      isResizing: true,\n      resizedItem: itemId,\n      resizeHandle: handle,\n      startSize: { w: item.w, h: item.h },\n      startPos: { x: e.clientX, y: e.clientY },\n      originalPos: { x: item.x, y: item.y }\n    })\n    \n    // Call onResizeStart callback\n    if (onResizeStart) {\n      const element = e.currentTarget as HTMLElement\n      onResizeStart(layout, item, item, { ...item }, e.nativeEvent, element)\n    }\n    \n    e.preventDefault()\n    e.stopPropagation()\n  }, [isResizable, layout, onResizeStart])\n\n  // Handle resize move\n  const handleResizeMove = useCallback((e: MouseEvent) => {\n    // This function is only called when resizing is active\n    \n    const item = layout.find(i => i.id === resizeState.resizedItem)\n    if (!item) return\n    \n    const horizontalMargin = margin ? margin[0] : gap\n    const verticalMargin = margin ? margin[1] : gap\n    const colWidth = (containerWidth - horizontalMargin * (cols - 1)) / cols\n    const deltaX = e.clientX - resizeState.startPos.x\n    const deltaY = e.clientY - resizeState.startPos.y\n    \n    // Use threshold for smoother grid snapping\n    const threshold = 0.3 // Snap when 30% into the next grid unit\n    \n    // Calculate grid unit changes with threshold\n    const gridDeltaX = deltaX / (colWidth + horizontalMargin)\n    const gridDeltaY = deltaY / (rowHeight + verticalMargin)\n    \n    // Apply threshold for smoother snapping\n    const deltaW = Math.round(gridDeltaX + (gridDeltaX > 0 ? -threshold : threshold))\n    const deltaH = Math.round(gridDeltaY + (gridDeltaY > 0 ? -threshold : threshold))\n    \n    let newW = resizeState.startSize.w\n    let newH = resizeState.startSize.h\n    let newX = item.x\n    let newY = item.y\n    \n    const originalX = resizeState.originalPos?.x || item.x\n    const originalY = resizeState.originalPos?.y || item.y\n    \n    switch (resizeState.resizeHandle) {\n      case 'se':\n        newW = resizeState.startSize.w + deltaW\n        newH = resizeState.startSize.h + deltaH\n        break\n      case 'sw':\n        newW = resizeState.startSize.w - deltaW\n        newH = resizeState.startSize.h + deltaH\n        newX = originalX + deltaW\n        break\n      case 'ne':\n        newW = resizeState.startSize.w + deltaW\n        newH = resizeState.startSize.h - deltaH\n        newY = originalY + deltaH\n        break\n      case 'nw':\n        newW = resizeState.startSize.w - deltaW\n        newH = resizeState.startSize.h - deltaH\n        newX = originalX + deltaW\n        newY = originalY + deltaH\n        break\n      case 'e':\n        newW = resizeState.startSize.w + deltaW\n        break\n      case 'w':\n        newW = resizeState.startSize.w - deltaW\n        newX = originalX + deltaW\n        break\n      case 's':\n        newH = resizeState.startSize.h + deltaH\n        break\n      case 'n':\n        newH = resizeState.startSize.h - deltaH\n        newY = originalY + deltaH\n        break\n    }\n    \n    // Apply min/max constraints\n    newW = Math.max(item.minW || 1, newW)\n    newH = Math.max(item.minH || 1, newH)\n    if (item.maxW) newW = Math.min(newW, item.maxW)\n    if (item.maxH) newH = Math.min(newH, item.maxH)\n    \n    // Ensure position stays within bounds\n    newX = Math.max(0, newX)\n    newY = Math.max(0, newY)\n    \n    // Ensure within grid bounds\n    newW = Math.min(newW, cols - newX)\n    \n    const newLayout = layout.map(i => \n      i.id === resizeState.resizedItem\n        ? { ...i, x: newX, y: newY, w: newW, h: newH }\n        : i\n    )\n    \n    setLayout(newLayout)\n    \n    // Call onResize callback\n    if (onResize && resizeState.originalPos) {\n      const element = containerRef.current?.querySelector(`[data-grid-id=\"${resizeState.resizedItem}\"]`) as HTMLElement\n      if (element) {\n        const originalItem = { ...item, x: resizeState.originalPos.x, y: resizeState.originalPos.y, w: resizeState.startSize.w, h: resizeState.startSize.h }\n        const newItem = { ...item, x: newX, y: newY, w: newW, h: newH }\n        onResize(newLayout, originalItem, newItem, newItem, e, element)\n      }\n    }\n  }, [resizeState, layout, containerWidth, cols, rowHeight, gap, margin, onResize])\n\n  // Handle resize end\n  const handleResizeEnd = useCallback((e: MouseEvent) => {\n    // This function is only called when resizing is active\n    \n    const resizedItem = layout.find(i => i.id === resizeState.resizedItem)\n    if (resizedItem && onResizeStop && resizeState.originalPos) {\n      const element = containerRef.current?.querySelector(`[data-grid-id=\"${resizeState.resizedItem}\"]`) as HTMLElement\n      if (element) {\n        const originalItem = { ...resizedItem, x: resizeState.originalPos.x, y: resizeState.originalPos.y, w: resizeState.startSize.w, h: resizeState.startSize.h }\n        onResizeStop(layout, originalItem, resizedItem, resizedItem, e, element)\n      }\n    }\n    \n    updateLayout(layout)\n    \n    setResizeState({\n      isResizing: false,\n      resizedItem: null,\n      resizeHandle: null,\n      startSize: { w: 0, h: 0 },\n      startPos: { x: 0, y: 0 }\n    })\n  }, [resizeState, layout, updateLayout, onResizeStop])\n\n  // Add global mouse event listeners\n  useEffect(() => {\n    if (dragState.isDragging) {\n      document.addEventListener('mousemove', handleDragMove)\n      document.addEventListener('mouseup', handleDragEnd)\n      document.body.style.cursor = 'grabbing'\n      document.body.style.userSelect = 'none'\n      \n      return () => {\n        document.removeEventListener('mousemove', handleDragMove)\n        document.removeEventListener('mouseup', handleDragEnd)\n        document.body.style.cursor = ''\n        document.body.style.userSelect = ''\n      }\n    }\n    // Return undefined when not dragging\n    return undefined\n  }, [dragState.isDragging, handleDragMove, handleDragEnd])\n\n  useEffect(() => {\n    if (resizeState.isResizing) {\n      document.addEventListener('mousemove', handleResizeMove)\n      document.addEventListener('mouseup', handleResizeEnd)\n      document.body.style.userSelect = 'none'\n      \n      return () => {\n        document.removeEventListener('mousemove', handleResizeMove)\n        document.removeEventListener('mouseup', handleResizeEnd)\n        document.body.style.userSelect = ''\n      }\n    }\n    // Return undefined when not resizing\n    return undefined\n  }, [resizeState.isResizing, handleResizeMove, handleResizeEnd])\n\n  // Calculate grid height\n  const verticalMargin = margin ? margin[1] : gap\n  const heights = layout.map(item => (item.y + item.h) * (rowHeight + verticalMargin))\n  const calculatedHeight = heights.length > 0 ? Math.max(...heights) : 0\n  \n  // Apply autoSize\n  const gridHeight = autoSize ? calculatedHeight : undefined\n\n  return (\n    <div\n      ref={containerRef}\n      className={cn(\n        'relative w-full overflow-auto',\n        dragState.isDragging && 'select-none',\n        className\n      )}\n      style={{\n        ...(gridHeight !== undefined && { minHeight: gridHeight + containerPadding[1] * 2 }),\n        padding: `${containerPadding[1]}px ${containerPadding[0]}px`,\n        ...style\n      }}\n    >\n      {/* Grid items */}\n      {layout.map(item => {\n        const isDragging = dragState.draggedItem === item.id\n        let position = getPixelPosition(item, cols, rowHeight, gap, containerWidth, margin)\n        \n        // If this item is being dragged, position it at the mouse cursor\n        if (isDragging && dragState.currentMousePos && containerRef.current) {\n          const containerRect = containerRef.current.getBoundingClientRect()\n          position = {\n            ...position,\n            left: dragState.currentMousePos.x - containerRect.left - dragState.dragOffset.x - containerPadding[0],\n            top: dragState.currentMousePos.y - containerRect.top - dragState.dragOffset.y - containerPadding[1]\n          }\n        }\n        \n        return (\n          <GridItemComponent\n            key={item.id}\n            item={item}\n            position={position}\n            isDragging={isDragging}\n            isResizing={resizeState.resizedItem === item.id}\n            isDraggable={isDraggable && item.isDraggable !== false}\n            isResizable={isResizable && item.isResizable !== false}\n            resizeHandles={resizeHandles}\n            draggableCancel={draggableCancel}\n            onDragStart={handleDragStart}\n            onResizeStart={handleResizeStart}\n          >\n            {children(item)}\n          </GridItemComponent>\n        )\n      })}\n      \n      {/* Placeholder during drag - React Grid Layout style */}\n      {dragState.isDragging && dragState.placeholder && (\n        <div\n          className=\"absolute rounded-lg transition-all duration-300 pointer-events-none\"\n          style={{\n            ...getPixelPosition(dragState.placeholder, cols, rowHeight, gap, containerWidth, margin),\n            zIndex: 9,\n            background: 'rgba(59, 130, 246, 0.15)',\n            border: '2px dashed rgb(59, 130, 246)',\n            boxSizing: 'border-box'\n          }}\n        />\n      )}\n      \n      {/* Placeholder during resize - React Grid Layout style */}\n      {resizeState.isResizing && resizeState.resizedItem && (() => {\n        const resizedItem = layout.find(i => i.id === resizeState.resizedItem)\n        if (!resizedItem) return null\n        \n        return (\n          <div\n            className=\"absolute rounded-lg transition-all duration-200 pointer-events-none\"\n            style={{\n              ...getPixelPosition(resizedItem, cols, rowHeight, gap, containerWidth, margin),\n              zIndex: 8,\n              background: 'rgba(59, 130, 246, 0.1)',\n              border: '2px dashed rgb(59, 130, 246)',\n              boxSizing: 'border-box'\n            }}\n          />\n        )\n      })()}\n      \n      {/* Dropping Item Preview */}\n      {droppingItem && !dragState.isDragging && (\n        <div\n          className=\"absolute bg-gray-200 border-2 border-dashed border-gray-400 rounded opacity-75 pointer-events-none flex items-center justify-center\"\n          style={{\n            width: ((droppingItem.w || 1) * containerWidth / cols) - gap,\n            height: ((droppingItem.h || 1) * rowHeight) - gap,\n            left: containerPadding[0],\n            top: containerPadding[1]\n          }}\n        >\n          <span className=\"text-gray-600 font-medium\">Drop here</span>\n        </div>\n      )}\n    </div>\n  )\n}"],"names":["useRef","useState","useEffect","useCallback","verticalMargin","jsxDEV","this"],"mappings":";;;;;AAEO,SAAS,sBACd,CACA,EAAA,CAAA,EACA,MACA,SACA,EAAA,GAAA,EACA,gBACA,MAC8B,EAAA;AAC9B,EAAA,MAAM,gBAAmB,GAAA,MAAA,GAAS,MAAO,CAAA,CAAC,CAAI,GAAA,GAAA;AAC9C,EAAA,MAAM,cAAiB,GAAA,MAAA,GAAS,MAAO,CAAA,CAAC,CAAI,GAAA,GAAA;AAC5C,EAAA,MAAM,QAAY,GAAA,CAAA,cAAA,GAAiB,gBAAoB,IAAA,IAAA,GAAO,CAAM,CAAA,IAAA,IAAA;AACpE,EAAA,MAAM,GAAM,GAAA,IAAA,CAAK,KAAM,CAAA,CAAA,IAAK,WAAW,gBAAiB,CAAA,CAAA;AACxD,EAAA,MAAM,GAAM,GAAA,IAAA,CAAK,KAAM,CAAA,CAAA,IAAK,YAAY,cAAe,CAAA,CAAA;AAEvD,EAAO,OAAA;AAAA,IACL,GAAK,EAAA,IAAA,CAAK,GAAI,CAAA,CAAA,EAAG,GAAG,CAAA;AAAA,IACpB,GAAK,EAAA,IAAA,CAAK,GAAI,CAAA,CAAA,EAAG,GAAG;AAAA,GACtB;AACF;AAEO,SAAS,iBACd,IACA,EAAA,IAAA,EACA,SACA,EAAA,GAAA,EACA,gBACA,MAC8D,EAAA;AAC9D,EAAA,MAAM,gBAAmB,GAAA,MAAA,GAAS,MAAO,CAAA,CAAC,CAAI,GAAA,GAAA;AAC9C,EAAA,MAAM,cAAiB,GAAA,MAAA,GAAS,MAAO,CAAA,CAAC,CAAI,GAAA,GAAA;AAC5C,EAAA,MAAM,QAAY,GAAA,CAAA,cAAA,GAAiB,gBAAoB,IAAA,IAAA,GAAO,CAAM,CAAA,IAAA,IAAA;AAEpE,EAAO,OAAA;AAAA,IACL,IAAA,EAAM,IAAK,CAAA,CAAA,IAAK,QAAW,GAAA,gBAAA,CAAA;AAAA,IAC3B,GAAA,EAAK,IAAK,CAAA,CAAA,IAAK,SAAY,GAAA,cAAA,CAAA;AAAA,IAC3B,OAAO,IAAK,CAAA,CAAA,GAAI,QAAY,GAAA,CAAA,IAAA,CAAK,IAAI,CAAK,IAAA,gBAAA;AAAA,IAC1C,QAAQ,IAAK,CAAA,CAAA,GAAI,SAAa,GAAA,CAAA,IAAA,CAAK,IAAI,CAAK,IAAA;AAAA,GAC9C;AACF;AAEgB,SAAA,cAAA,CACd,OACA,KACS,EAAA;AACT,EAAO,OAAA,EACL,MAAM,CAAI,GAAA,KAAA,CAAM,KAAK,KAAM,CAAA,CAAA,IAC3B,KAAM,CAAA,CAAA,GAAI,KAAM,CAAA,CAAA,IAAK,MAAM,CAC3B,IAAA,KAAA,CAAM,CAAI,GAAA,KAAA,CAAM,CAAK,IAAA,KAAA,CAAM,KAC3B,KAAM,CAAA,CAAA,GAAI,KAAM,CAAA,CAAA,IAAK,KAAM,CAAA,CAAA,CAAA;AAE/B;AAEO,SAAS,aACd,CAAA,KAAA,EACA,WACA,EAAA,IAAA,EACA,SACc,EAAA;AACd,EAAM,MAAA,YAAA,GAAe,YACjB,KAAM,CAAA,MAAA,CAAO,UAAQ,IAAK,CAAA,EAAA,KAAO,SAAS,CAC1C,GAAA,KAAA;AAGJ,EAAA,MAAM,yBAAyB,YAAa,CAAA,IAAA;AAAA,IAAK,CAAA,IAAA,KAC/C,cAAe,CAAA,WAAA,EAAa,IAAI;AAAA,GAClC;AAEA,EAAA,IAAI,CAAC,sBAAwB,EAAA;AAC3B,IAAO,OAAA,WAAA;AAAA;AAIT,EAAA,IAAI,IAAI,WAAY,CAAA,CAAA;AAEpB,EAAA,OAAO,IAAM,EAAA;AACX,IAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,IAAK,IAAO,GAAA,WAAA,CAAY,GAAG,CAAK,EAAA,EAAA;AAC9C,MAAA,MAAM,YAAe,GAAA,EAAE,GAAG,WAAA,EAAa,GAAG,CAAE,EAAA;AAC5C,MAAA,MAAM,eAAe,YAAa,CAAA,IAAA;AAAA,QAAK,CAAA,IAAA,KACrC,cAAe,CAAA,YAAA,EAAc,IAAI;AAAA,OACnC;AAEA,MAAA,IAAI,CAAC,YAAc,EAAA;AACjB,QAAO,OAAA,YAAA;AAAA;AACT;AAEF,IAAA,CAAA,EAAA;AAAA;AAEJ;AAEO,SAAS,aACd,CAAA,KAAA,EACA,IACA,EAAA,WAAA,GAAgD,UACpC,EAAA;AACZ,EAAI,IAAA,CAAC,aAAoB,OAAA,KAAA;AAGzB,EAAA,MAAM,WAAc,GAAA,KAAA,CAAM,MAAO,CAAA,CAAA,IAAA,KAAQ,KAAK,MAAM,CAAA;AACpD,EAAA,MAAM,iBAAiB,KAAM,CAAA,MAAA,CAAO,CAAQ,IAAA,KAAA,CAAC,KAAK,MAAM,CAAA;AAGxD,EAAM,MAAA,MAAA,GAAS,CAAC,GAAG,cAAc,EAAE,IAAK,CAAA,CAAC,GAAG,CAAM,KAAA;AAChD,IAAA,IAAI,gBAAgB,YAAc,EAAA;AAEhC,MAAA,IAAI,EAAE,CAAM,KAAA,CAAA,CAAE,GAAU,OAAA,CAAA,CAAE,IAAI,CAAE,CAAA,CAAA;AAChC,MAAO,OAAA,CAAA,CAAE,IAAI,CAAE,CAAA,CAAA;AAAA,KACV,MAAA;AAEL,MAAA,IAAI,EAAE,CAAM,KAAA,CAAA,CAAE,GAAU,OAAA,CAAA,CAAE,IAAI,CAAE,CAAA,CAAA;AAChC,MAAO,OAAA,CAAA,CAAE,IAAI,CAAE,CAAA,CAAA;AAAA;AACjB,GACD,CAAA;AAED,EAAM,MAAA,SAAA,GAAwB,CAAC,GAAG,WAAW,CAAA;AAE7C,EAAA,MAAA,CAAO,QAAQ,CAAQ,IAAA,KAAA;AACrB,IAAA,IAAI,gBAAgB,UAAY,EAAA;AAE9B,MAAA,IAAI,IAAO,GAAA,CAAA;AACX,MAAA,IAAI,KAAQ,GAAA,KAAA;AAGZ,MAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAC,KAAA,EAAO,CAAK,EAAA,EAAA;AAC3B,QAAA,MAAM,WAAW,EAAE,GAAG,MAAM,CAAG,EAAA,CAAA,EAAG,KAAK,CAAE,EAAA;AACzC,QAAA,MAAM,eAAe,SAAU,CAAA,IAAA;AAAA,UAAK,CAAA,MAAA,KAClC,cAAe,CAAA,QAAA,EAAU,MAAM;AAAA,SACjC;AAEA,QAAA,IAAI,CAAC,YAAc,EAAA;AACjB,UAAO,IAAA,GAAA,CAAA;AACP,UAAQ,KAAA,GAAA,IAAA;AAAA;AACV;AAGF,MAAA,SAAA,CAAU,KAAK,EAAE,GAAG,IAAM,EAAA,CAAA,EAAG,MAAM,CAAA;AAAA,KACrC,MAAA,IAAW,gBAAgB,YAAc,EAAA;AAEvC,MAAA,IAAI,IAAO,GAAA,CAAA;AACX,MAAA,IAAI,KAAQ,GAAA,KAAA;AAGZ,MAAS,KAAA,IAAA,CAAA,GAAI,GAAG,CAAK,IAAA,IAAA,GAAO,KAAK,CAAK,IAAA,CAAC,OAAO,CAAK,EAAA,EAAA;AACjD,QAAA,MAAM,WAAW,EAAE,GAAG,MAAM,CAAG,EAAA,CAAA,EAAG,KAAK,CAAE,EAAA;AACzC,QAAA,MAAM,eAAe,SAAU,CAAA,IAAA;AAAA,UAAK,CAAA,MAAA,KAClC,cAAe,CAAA,QAAA,EAAU,MAAM;AAAA,SACjC;AAEA,QAAA,IAAI,CAAC,YAAc,EAAA;AACjB,UAAO,IAAA,GAAA,CAAA;AACP,UAAQ,KAAA,GAAA,IAAA;AAAA;AACV;AAGF,MAAA,SAAA,CAAU,KAAK,EAAE,GAAG,IAAM,EAAA,CAAA,EAAG,MAAM,CAAA;AAAA;AACrC,GACD,CAAA;AAED,EAAO,OAAA,SAAA;AACT;AAEO,SAAS,SACd,CAAA,MAAA,EACA,IACA,EAAA,KAAA,EACA,aACY,EAAA;AACZ,EAAM,MAAA,WAAA,GAAc,EAAE,GAAG,IAAK,EAAA;AAC9B,EAAI,IAAA,WAAA,GAAc,CAAC,GAAG,MAAM,CAAA;AAG5B,EAAA,MAAM,YAAY,WAAY,CAAA,SAAA,CAAU,OAAK,CAAE,CAAA,EAAA,KAAO,KAAK,EAAE,CAAA;AAC7D,EAAA,IAAI,cAAc,CAAI,CAAA,EAAA;AACpB,IAAA,WAAA,CAAY,SAAS,CAAI,GAAA,WAAA;AAAA;AAI3B,EAAM,MAAA,aAAA,GAAgB,CAAC,SAAoC,KAAA;AACzD,IAAO,OAAA,WAAA,CAAY,OAAO,CAAK,CAAA,KAAA;AAC7B,MAAA,IAAI,EAAE,EAAO,KAAA,SAAA,CAAU,EAAM,IAAA,CAAA,CAAE,QAAe,OAAA,KAAA;AAC9C,MAAO,OAAA,cAAA,CAAe,WAAW,CAAC,CAAA;AAAA,KACnC,CAAA;AAAA,GACH;AAGA,EAAM,MAAA,YAAA,uBAAmB,GAAY,EAAA;AACrC,EAAM,MAAA,WAAA,GAA0B,CAAC,WAAW,CAAA;AAE5C,EAAO,OAAA,WAAA,CAAY,SAAS,CAAG,EAAA;AAC7B,IAAM,MAAA,WAAA,GAAc,YAAY,KAAM,EAAA;AACtC,IAAA,IAAI,YAAa,CAAA,GAAA,CAAI,WAAY,CAAA,EAAE,CAAG,EAAA;AACtC,IAAa,YAAA,CAAA,GAAA,CAAI,YAAY,EAAE,CAAA;AAE/B,IAAM,MAAA,UAAA,GAAa,cAAc,WAAW,CAAA;AAE5C,IAAA,KAAA,MAAW,aAAa,UAAY,EAAA;AAClC,MAAA,IAAI,YAAa,CAAA,GAAA,CAAI,SAAU,CAAA,EAAE,CAAG,EAAA;AAGpC,MAAM,MAAA,IAAA,GAAO,WAAY,CAAA,CAAA,GAAI,WAAY,CAAA,CAAA;AACzC,MAAA,MAAM,cAAiB,GAAA,EAAE,GAAG,SAAA,EAAW,GAAG,IAAK,EAAA;AAG/C,MAAA,MAAM,iBAAiB,WAAY,CAAA,SAAA,CAAU,OAAK,CAAE,CAAA,EAAA,KAAO,UAAU,EAAE,CAAA;AACvE,MAAA,IAAI,mBAAmB,CAAI,CAAA,EAAA;AACzB,QAAA,WAAA,CAAY,cAAc,CAAI,GAAA,cAAA;AAE9B,QAAA,WAAA,CAAY,KAAK,cAAc,CAAA;AAAA;AACjC;AACF;AAGF,EAAO,OAAA,WAAA;AACT;AAEgB,SAAA,gBAAA,CACd,QACA,IACY,EAAA;AACZ,EAAO,OAAA,MAAA,CAAO,MAAO,CAAA,CAAA,CAAA,KAAK,CAAE,CAAA,EAAA,KAAO,KAAK,EAAM,IAAA,cAAA,CAAe,CAAG,EAAA,IAAI,CAAC,CAAA;AACvE;;;ACtNO,MAAM,gBAA8C,CAAC;AAAA,EAC1D,IAAO,GAAA,EAAA;AAAA,EACP,SAAY,GAAA,EAAA;AAAA,EACZ,GAAM,GAAA,EAAA;AAAA,EACN,MAAA;AAAA,EACA,gBAAA,GAAmB,CAAC,EAAA,EAAI,EAAE,CAAA;AAAA,EAC1B,OAAA;AAAA,EACA,WAAc,GAAA,IAAA;AAAA,EACd,WAAc,GAAA,IAAA;AAAA,EACd,gBAAmB,GAAA,KAAA;AAAA,EACnB,YAAe,GAAA,KAAA;AAAA,EACf,SAAY,GAAA,IAAA;AAAA,EACZ,WAAc,GAAA,UAAA;AAAA,EACd,aAAA,GAAgB,CAAC,IAAI,CAAA;AAAA,EACrB,eAAA;AAAA,EACA,QAAW,GAAA,IAAA;AAAA,EACX,iBAAiB,gBAAmB,GAAA,IAAA;AAAA,EACpC,gBAAgB,eAAkB,GAAA,CAAA;AAAA,EAClC,YAAA;AAAA,EACA,cAAA;AAAA,EACA,WAAA;AAAA,EACA,MAAA;AAAA,EACA,UAAA;AAAA,EACA,aAAA;AAAA,EACA,QAAA;AAAA,EACA,YAAA;AAAA,EACA,MAAQ,EAAA,OAAA;AAAA,EACR,KAAA;AAAA,EACA,QAAA;AAAA,EACA,SAAA;AAAA,EACA;AACF,CAAM,KAAA;AACJ,EAAM,MAAA,YAAA,GAAeA,oBAAuB,IAAI,CAAA;AAChD,EAAA,MAAM,CAAC,cAAA,EAAgB,iBAAiB,CAAA,GAAIC,sBAAS,CAAC,CAAA;AACtD,EAAA,MAAM,CAAC,MAAA,EAAQ,SAAS,CAAA,GAAIA,sBAAqB,KAAK,CAAA;AAEtD,EAAA,MAAM,CAAC,SAAA,EAAW,YAAY,CAAA,GAAIA,qBAAoB,CAAA;AAAA,IACpD,UAAY,EAAA,KAAA;AAAA,IACZ,WAAa,EAAA,IAAA;AAAA,IACb,UAAY,EAAA,EAAE,CAAG,EAAA,CAAA,EAAG,GAAG,CAAE,EAAA;AAAA,IACzB,WAAa,EAAA,IAAA;AAAA,IACb,gBAAkB,EAAA,IAAA;AAAA,IAClB,eAAiB,EAAA,KAAA;AAAA,GAClB,CAAA;AAED,EAAA,MAAM,CAAC,WAAA,EAAa,cAAc,CAAA,GAAIA,qBAAsB,CAAA;AAAA,IAC1D,UAAY,EAAA,KAAA;AAAA,IACZ,WAAa,EAAA,IAAA;AAAA,IACb,YAAc,EAAA,IAAA;AAAA,IACd,SAAW,EAAA,EAAE,CAAG,EAAA,CAAA,EAAG,GAAG,CAAE,EAAA;AAAA,IACxB,QAAU,EAAA,EAAE,CAAG,EAAA,CAAA,EAAG,GAAG,CAAE;AAAA,GACxB,CAAA;AAGD,EAAAC,sBAAA,CAAU,MAAM;AACd,IAAA,MAAM,cAAc,MAAM;AACxB,MAAA,IAAI,aAAa,OAAS,EAAA;AACxB,QAAA,iBAAA,CAAkB,aAAa,OAAQ,CAAA,WAAA,GAAc,gBAAiB,CAAA,CAAC,IAAI,CAAC,CAAA;AAAA;AAC9E,KACF;AAEA,IAAY,WAAA,EAAA;AACZ,IAAO,MAAA,CAAA,gBAAA,CAAiB,UAAU,WAAW,CAAA;AAC7C,IAAA,OAAO,MAAM,MAAA,CAAO,mBAAoB,CAAA,QAAA,EAAU,WAAW,CAAA;AAAA,GAC/D,EAAG,CAAC,gBAAgB,CAAC,CAAA;AAGrB,EAAAA,sBAAA,CAAU,MAAM;AACd,IAAA,SAAA,CAAU,CAAc,UAAA,KAAA;AAEtB,MAAM,MAAA,gBAAA,GAAmB,IAAI,GAAA,CAAI,UAAW,CAAA,GAAA,CAAI,CAAQ,IAAA,KAAA,CAAC,IAAK,CAAA,EAAA,EAAI,IAAI,CAAC,CAAC,CAAA;AAGxE,MAAM,MAAA,YAAA,GAAe,KAAM,CAAA,GAAA,CAAI,CAAQ,IAAA,KAAA;AACrC,QAAA,MAAM,QAAW,GAAA,gBAAA,CAAiB,GAAI,CAAA,IAAA,CAAK,EAAE,CAAA;AAC7C,QAAA,IAAI,QAAU,EAAA;AAEZ,UAAO,OAAA;AAAA,YACL,GAAG,IAAA;AAAA,YACH,GAAG,QAAS,CAAA,CAAA;AAAA,YACZ,GAAG,QAAS,CAAA,CAAA;AAAA,YACZ,GAAG,QAAS,CAAA,CAAA;AAAA,YACZ,GAAG,QAAS,CAAA;AAAA,WACd;AAAA;AAGF,QAAO,OAAA,IAAA;AAAA,OACR,CAAA;AAGD,MAAO,OAAA,aAAA,CAAc,YAAc,EAAA,IAAA,EAAM,WAAW,CAAA;AAAA,KACrD,CAAA;AAAA,GACA,EAAA,CAAC,KAAO,EAAA,IAAA,EAAM,WAAW,CAAC,CAAA;AAG7B,EAAM,MAAA,YAAA,GAAeC,wBAAY,CAAA,CAAC,SAA0B,KAAA;AAC1D,IAAA,MAAM,SAAY,GAAA,aAAA,CAAc,SAAW,EAAA,IAAA,EAAM,WAAW,CAAA;AAC5D,IAAA,SAAA,CAAU,SAAS,CAAA;AACnB,IAAA,cAAA,GAAiB,SAAS,CAAA;AAAA,GACzB,EAAA,CAAC,IAAM,EAAA,WAAA,EAAa,cAAc,CAAC,CAAA;AAGtC,EAAA,MAAM,eAAkB,GAAAA,wBAAA,CAAY,CAAC,MAAA,EAAgB,CAAwB,KAAA;AAE3E,IAAA,MAAM,OAAO,MAAO,CAAA,IAAA,CAAK,CAAK,CAAA,KAAA,CAAA,CAAE,OAAO,MAAM,CAAA;AAG7C,IAAM,MAAA,IAAA,GAAO,CAAE,CAAA,aAAA,CAAc,qBAAsB,EAAA;AAEnD,IAAA,MAAM,YAAe,GAAA;AAAA,MACnB,UAAY,EAAA,IAAA;AAAA,MACZ,WAAa,EAAA,MAAA;AAAA,MACb,UAAY,EAAA;AAAA,QACV,CAAA,EAAG,CAAE,CAAA,OAAA,GAAU,IAAK,CAAA,IAAA;AAAA,QACpB,CAAA,EAAG,CAAE,CAAA,OAAA,GAAU,IAAK,CAAA;AAAA,OACtB;AAAA,MACA,WAAA,EAAa,EAAE,GAAG,IAAK,EAAA;AAAA,MACvB,gBAAA,EAAkB,EAAE,GAAG,IAAK,EAAA;AAAA,MAC5B,iBAAiB,EAAE,CAAA,EAAG,EAAE,OAAS,EAAA,CAAA,EAAG,EAAE,OAAQ;AAAA,KAChD;AAEA,IAAA,YAAA,CAAa,YAAY,CAAA;AAGzB,IAAA,IAAI,WAAa,EAAA;AACf,MAAA,MAAM,UAAU,CAAE,CAAA,aAAA;AAClB,MAAY,WAAA,CAAA,MAAA,EAAQ,MAAM,IAAM,EAAA,EAAE,GAAG,IAAK,EAAA,EAAG,CAAE,CAAA,WAAA,EAAa,OAAO,CAAA;AAAA;AAGrE,IAAA,CAAA,CAAE,cAAe,EAAA;AAAA,GAChB,EAAA,CAAC,WAAa,EAAA,MAAA,EAAQ,WAAW,CAAC,CAAA;AAGrC,EAAM,MAAA,cAAA,GAAiBA,wBAAY,CAAA,CAAC,CAAkB,KAAA;AAEpD,IAAI,IAAA,CAAC,aAAa,OAAS,EAAA;AAE3B,IAAM,MAAA,aAAA,GAAgB,YAAa,CAAA,OAAA,CAAQ,qBAAsB,EAAA;AACjE,IAAM,MAAA,CAAA,GAAI,EAAE,OAAU,GAAA,aAAA,CAAc,OAAO,SAAU,CAAA,UAAA,CAAW,CAAI,GAAA,gBAAA,CAAiB,CAAC,CAAA;AACtF,IAAM,MAAA,CAAA,GAAI,EAAE,OAAU,GAAA,aAAA,CAAc,MAAM,SAAU,CAAA,UAAA,CAAW,CAAI,GAAA,gBAAA,CAAiB,CAAC,CAAA;AAErF,IAAM,MAAA,EAAE,GAAK,EAAA,GAAA,EAAQ,GAAA,qBAAA,CAAsB,CAAG,EAAA,CAAA,EAAG,IAAM,EAAA,SAAA,EAAW,GAAK,EAAA,cAAA,EAAgB,MAAM,CAAA;AAE7F,IAAA,MAAM,cAAc,MAAO,CAAA,IAAA,CAAK,OAAK,CAAE,CAAA,EAAA,KAAO,UAAU,WAAW,CAAA;AACnE,IAAI,IAAA,CAAC,WAAe,IAAA,WAAA,CAAY,MAAQ,EAAA;AAExC,IAAA,IAAI,WAAc,GAAA;AAAA,MAChB,CAAA,EAAG,IAAK,CAAA,GAAA,CAAI,CAAG,EAAA,IAAA,CAAK,IAAI,IAAO,GAAA,WAAA,CAAY,CAAG,EAAA,GAAG,CAAC,CAAA;AAAA,MAClD,CAAG,EAAA,IAAA,CAAK,GAAI,CAAA,CAAA,EAAG,GAAG,CAAA;AAAA,MAClB,GAAG,WAAY,CAAA,CAAA;AAAA,MACf,GAAG,WAAY,CAAA;AAAA,KACjB;AAGA,IAAA,IAAI,OAAW,IAAA,WAAA,CAAY,CAAI,GAAA,WAAA,CAAY,IAAI,OAAS,EAAA;AACtD,MAAA,WAAA,CAAY,IAAI,IAAK,CAAA,GAAA,CAAI,CAAG,EAAA,OAAA,GAAU,YAAY,CAAC,CAAA;AAAA;AAIrD,IAAA,IAAI,SAAW,EAAA;AACb,MAAY,WAAA,CAAA,CAAA,GAAI,IAAK,CAAA,GAAA,CAAI,CAAG,EAAA,IAAA,CAAK,GAAI,CAAA,IAAA,GAAO,WAAY,CAAA,CAAA,EAAG,WAAY,CAAA,CAAC,CAAC,CAAA;AACzE,MAAA,WAAA,CAAY,CAAI,GAAA,IAAA,CAAK,GAAI,CAAA,CAAA,EAAG,YAAY,CAAC,CAAA;AAAA;AAI3C,IAAA,MAAM,aAAa,MAAO,CAAA,GAAA;AAAA,MAAI,CAAA,IAAA,KAC5B,IAAK,CAAA,EAAA,KAAO,SAAU,CAAA,WAAA,GAAc,EAAE,GAAG,IAAA,EAAM,GAAG,WAAA,EAAgB,GAAA;AAAA,KACpE;AAGA,IAAI,IAAA,gBAAA,IAAoB,CAAC,YAAc,EAAA;AACrC,MAAM,MAAA,UAAA,GAAa,iBAAiB,UAAY,EAAA,EAAE,GAAG,WAAa,EAAA,GAAG,aAAa,CAAA;AAClF,MAAA,MAAM,gBAAmB,GAAA,UAAA,CAAW,MAAO,CAAA,CAAA,IAAA,KAAQ,KAAK,MAAM,CAAA;AAE9D,MAAI,IAAA,gBAAA,CAAiB,SAAS,CAAG,EAAA;AAE/B,QAAA;AAAA;AACF;AAIF,IAAA,IAAI,WAAc,GAAA,UAAA;AAClB,IAAI,IAAA,CAAC,gBAAoB,IAAA,CAAC,YAAc,EAAA;AACtC,MAAA,MAAM,mBAAsB,GAAA,EAAE,GAAG,WAAA,EAAa,GAAG,WAAY,EAAA;AAE7D,MAAA,MAAM,mBAAmB,SAAU,CAAA,gBAAA;AACnC,MAAA,MAAM,cAAiB,GAAA,EAAE,GAAG,WAAA,EAAa,GAAG,gBAAiB,EAAA;AAC7D,MAAA,WAAA,GAAc,SAAU,CAAA,UAAA,EAAY,mBAAqB,EAAA,IAAA,EAAM,cAAc,CAAA;AAAA;AAI/E,IAAA,MAAM,eAAkB,GAAA,aAAA,CAAc,WAAa,EAAA,IAAA,EAAM,WAAW,CAAA;AACpE,IAAA,SAAA,CAAU,eAAe,CAAA;AAEzB,IAAA,YAAA,CAAa,CAAS,IAAA,MAAA;AAAA,MACpB,GAAG,IAAA;AAAA,MACH,WAAa,EAAA,WAAA;AAAA,MACb,iBAAiB,EAAE,CAAA,EAAG,EAAE,OAAS,EAAA,CAAA,EAAG,EAAE,OAAQ;AAAA,KAC9C,CAAA,CAAA;AAGF,IAAI,IAAA,MAAA,IAAU,UAAU,gBAAkB,EAAA;AACxC,MAAA,MAAM,UAAU,YAAa,CAAA,OAAA,EAAS,cAAc,CAAkB,eAAA,EAAA,SAAA,CAAU,WAAW,CAAI,EAAA,CAAA,CAAA;AAC/F,MAAA,IAAI,OAAS,EAAA;AACX,QAAO,MAAA,CAAA,eAAA,EAAiB,EAAE,GAAG,WAAA,EAAa,GAAG,SAAU,CAAA,gBAAA,IAAoB,EAAE,GAAG,aAAa,GAAG,WAAA,IAAe,EAAE,GAAG,aAAa,GAAG,WAAA,EAAe,EAAA,CAAA,EAAG,OAAO,CAAA;AAAA;AAC/J;AACF,KACC,CAAC,SAAA,EAAW,MAAQ,EAAA,IAAA,EAAM,WAAW,GAAK,EAAA,cAAA,EAAgB,gBAAkB,EAAA,gBAAA,EAAkB,cAAc,SAAW,EAAA,WAAA,EAAa,MAAQ,EAAA,OAAA,EAAS,MAAM,CAAC,CAAA;AAG/J,EAAM,MAAA,aAAA,GAAgBA,wBAAY,CAAA,CAAC,CAAkB,KAAA;AAGnD,IAAA,MAAM,cAAc,MAAO,CAAA,IAAA,CAAK,OAAK,CAAE,CAAA,EAAA,KAAO,UAAU,WAAW,CAAA;AACnE,IAAI,IAAA,WAAA,IAAe,UAAc,IAAA,SAAA,CAAU,gBAAkB,EAAA;AAC3D,MAAA,MAAM,UAAU,YAAa,CAAA,OAAA,EAAS,cAAc,CAAkB,eAAA,EAAA,SAAA,CAAU,WAAW,CAAI,EAAA,CAAA,CAAA;AAC/F,MAAA,IAAI,OAAS,EAAA;AACX,QAAA,UAAA,CAAW,QAAQ,EAAE,GAAG,WAAa,EAAA,GAAG,UAAU,gBAAiB,EAAA,EAAG,WAAa,EAAA,EAAE,GAAG,WAAa,EAAA,GAAG,UAAU,WAAY,EAAA,EAAG,GAAG,OAAO,CAAA;AAAA;AAC7I;AAIF,IAAA,YAAA,CAAa,MAAM,CAAA;AAEnB,IAAa,YAAA,CAAA;AAAA,MACX,UAAY,EAAA,KAAA;AAAA,MACZ,WAAa,EAAA,IAAA;AAAA,MACb,UAAY,EAAA,EAAE,CAAG,EAAA,CAAA,EAAG,GAAG,CAAE,EAAA;AAAA,MACzB,WAAa,EAAA,IAAA;AAAA,MACb,gBAAkB,EAAA,IAAA;AAAA,MAClB,eAAiB,EAAA,KAAA;AAAA,KAClB,CAAA;AAAA,KACA,CAAC,SAAA,EAAW,MAAQ,EAAA,YAAA,EAAc,UAAU,CAAC,CAAA;AAGhD,EAAA,MAAM,iBAAoB,GAAAA,wBAAA,CAAY,CACpC,MAAA,EACA,QACA,CACG,KAAA;AAEH,IAAA,MAAM,OAAO,MAAO,CAAA,IAAA,CAAK,CAAK,CAAA,KAAA,CAAA,CAAE,OAAO,MAAM,CAAA;AAE7C,IAAe,cAAA,CAAA;AAAA,MACb,UAAY,EAAA,IAAA;AAAA,MACZ,WAAa,EAAA,MAAA;AAAA,MACb,YAAc,EAAA,MAAA;AAAA,MACd,WAAW,EAAE,CAAA,EAAG,KAAK,CAAG,EAAA,CAAA,EAAG,KAAK,CAAE,EAAA;AAAA,MAClC,UAAU,EAAE,CAAA,EAAG,EAAE,OAAS,EAAA,CAAA,EAAG,EAAE,OAAQ,EAAA;AAAA,MACvC,aAAa,EAAE,CAAA,EAAG,KAAK,CAAG,EAAA,CAAA,EAAG,KAAK,CAAE;AAAA,KACrC,CAAA;AAGD,IAAA,IAAI,aAAe,EAAA;AACjB,MAAA,MAAM,UAAU,CAAE,CAAA,aAAA;AAClB,MAAc,aAAA,CAAA,MAAA,EAAQ,MAAM,IAAM,EAAA,EAAE,GAAG,IAAK,EAAA,EAAG,CAAE,CAAA,WAAA,EAAa,OAAO,CAAA;AAAA;AAGvE,IAAA,CAAA,CAAE,cAAe,EAAA;AACjB,IAAA,CAAA,CAAE,eAAgB,EAAA;AAAA,GACjB,EAAA,CAAC,WAAa,EAAA,MAAA,EAAQ,aAAa,CAAC,CAAA;AAGvC,EAAM,MAAA,gBAAA,GAAmBA,wBAAY,CAAA,CAAC,CAAkB,KAAA;AAGtD,IAAA,MAAM,OAAO,MAAO,CAAA,IAAA,CAAK,OAAK,CAAE,CAAA,EAAA,KAAO,YAAY,WAAW,CAAA;AAC9D,IAAA,IAAI,CAAC,IAAM,EAAA;AAEX,IAAA,MAAM,gBAAmB,GAAA,MAAA,GAAS,MAAO,CAAA,CAAC,CAAI,GAAA,GAAA;AAC9C,IAAA,MAAMC,eAAiB,GAAA,MAAA,GAAS,MAAO,CAAA,CAAC,CAAI,GAAA,GAAA;AAC5C,IAAA,MAAM,QAAY,GAAA,CAAA,cAAA,GAAiB,gBAAoB,IAAA,IAAA,GAAO,CAAM,CAAA,IAAA,IAAA;AACpE,IAAA,MAAM,MAAS,GAAA,CAAA,CAAE,OAAU,GAAA,WAAA,CAAY,QAAS,CAAA,CAAA;AAChD,IAAA,MAAM,MAAS,GAAA,CAAA,CAAE,OAAU,GAAA,WAAA,CAAY,QAAS,CAAA,CAAA;AAGhD,IAAA,MAAM,SAAY,GAAA,GAAA;AAGlB,IAAM,MAAA,UAAA,GAAa,UAAU,QAAW,GAAA,gBAAA,CAAA;AACxC,IAAM,MAAA,UAAA,GAAa,UAAU,SAAYA,GAAAA,eAAAA,CAAAA;AAGzC,IAAM,MAAA,MAAA,GAAS,KAAK,KAAM,CAAA,UAAA,IAAc,aAAa,CAAI,GAAA,CAAC,YAAY,SAAU,CAAA,CAAA;AAChF,IAAM,MAAA,MAAA,GAAS,KAAK,KAAM,CAAA,UAAA,IAAc,aAAa,CAAI,GAAA,CAAC,YAAY,SAAU,CAAA,CAAA;AAEhF,IAAI,IAAA,IAAA,GAAO,YAAY,SAAU,CAAA,CAAA;AACjC,IAAI,IAAA,IAAA,GAAO,YAAY,SAAU,CAAA,CAAA;AACjC,IAAA,IAAI,OAAO,IAAK,CAAA,CAAA;AAChB,IAAA,IAAI,OAAO,IAAK,CAAA,CAAA;AAEhB,IAAA,MAAM,SAAY,GAAA,WAAA,CAAY,WAAa,EAAA,CAAA,IAAK,IAAK,CAAA,CAAA;AACrD,IAAA,MAAM,SAAY,GAAA,WAAA,CAAY,WAAa,EAAA,CAAA,IAAK,IAAK,CAAA,CAAA;AAErD,IAAA,QAAQ,YAAY,YAAc;AAAA,MAChC,KAAK,IAAA;AACH,QAAO,IAAA,GAAA,WAAA,CAAY,UAAU,CAAI,GAAA,MAAA;AACjC,QAAO,IAAA,GAAA,WAAA,CAAY,UAAU,CAAI,GAAA,MAAA;AACjC,QAAA;AAAA,MACF,KAAK,IAAA;AACH,QAAO,IAAA,GAAA,WAAA,CAAY,UAAU,CAAI,GAAA,MAAA;AACjC,QAAO,IAAA,GAAA,WAAA,CAAY,UAAU,CAAI,GAAA,MAAA;AACjC,QAAA,IAAA,GAAO,SAAY,GAAA,MAAA;AACnB,QAAA;AAAA,MACF,KAAK,IAAA;AACH,QAAO,IAAA,GAAA,WAAA,CAAY,UAAU,CAAI,GAAA,MAAA;AACjC,QAAO,IAAA,GAAA,WAAA,CAAY,UAAU,CAAI,GAAA,MAAA;AACjC,QAAA,IAAA,GAAO,SAAY,GAAA,MAAA;AACnB,QAAA;AAAA,MACF,KAAK,IAAA;AACH,QAAO,IAAA,GAAA,WAAA,CAAY,UAAU,CAAI,GAAA,MAAA;AACjC,QAAO,IAAA,GAAA,WAAA,CAAY,UAAU,CAAI,GAAA,MAAA;AACjC,QAAA,IAAA,GAAO,SAAY,GAAA,MAAA;AACnB,QAAA,IAAA,GAAO,SAAY,GAAA,MAAA;AACnB,QAAA;AAAA,MACF,KAAK,GAAA;AACH,QAAO,IAAA,GAAA,WAAA,CAAY,UAAU,CAAI,GAAA,MAAA;AACjC,QAAA;AAAA,MACF,KAAK,GAAA;AACH,QAAO,IAAA,GAAA,WAAA,CAAY,UAAU,CAAI,GAAA,MAAA;AACjC,QAAA,IAAA,GAAO,SAAY,GAAA,MAAA;AACnB,QAAA;AAAA,MACF,KAAK,GAAA;AACH,QAAO,IAAA,GAAA,WAAA,CAAY,UAAU,CAAI,GAAA,MAAA;AACjC,QAAA;AAAA,MACF,KAAK,GAAA;AACH,QAAO,IAAA,GAAA,WAAA,CAAY,UAAU,CAAI,GAAA,MAAA;AACjC,QAAA,IAAA,GAAO,SAAY,GAAA,MAAA;AACnB,QAAA;AAAA;AAIJ,IAAA,IAAA,GAAO,IAAK,CAAA,GAAA,CAAI,IAAK,CAAA,IAAA,IAAQ,GAAG,IAAI,CAAA;AACpC,IAAA,IAAA,GAAO,IAAK,CAAA,GAAA,CAAI,IAAK,CAAA,IAAA,IAAQ,GAAG,IAAI,CAAA;AACpC,IAAA,IAAI,KAAK,IAAM,EAAA,IAAA,GAAO,KAAK,GAAI,CAAA,IAAA,EAAM,KAAK,IAAI,CAAA;AAC9C,IAAA,IAAI,KAAK,IAAM,EAAA,IAAA,GAAO,KAAK,GAAI,CAAA,IAAA,EAAM,KAAK,IAAI,CAAA;AAG9C,IAAO,IAAA,GAAA,IAAA,CAAK,GAAI,CAAA,CAAA,EAAG,IAAI,CAAA;AACvB,IAAO,IAAA,GAAA,IAAA,CAAK,GAAI,CAAA,CAAA,EAAG,IAAI,CAAA;AAGvB,IAAA,IAAA,GAAO,IAAK,CAAA,GAAA,CAAI,IAAM,EAAA,IAAA,GAAO,IAAI,CAAA;AAEjC,IAAA,MAAM,YAAY,MAAO,CAAA,GAAA;AAAA,MAAI,OAC3B,CAAE,CAAA,EAAA,KAAO,WAAY,CAAA,WAAA,GACjB,EAAE,GAAG,CAAA,EAAG,CAAG,EAAA,IAAA,EAAM,GAAG,IAAM,EAAA,CAAA,EAAG,IAAM,EAAA,CAAA,EAAG,MACtC,GAAA;AAAA,KACN;AAEA,IAAA,SAAA,CAAU,SAAS,CAAA;AAGnB,IAAI,IAAA,QAAA,IAAY,YAAY,WAAa,EAAA;AACvC,MAAA,MAAM,UAAU,YAAa,CAAA,OAAA,EAAS,cAAc,CAAkB,eAAA,EAAA,WAAA,CAAY,WAAW,CAAI,EAAA,CAAA,CAAA;AACjG,MAAA,IAAI,OAAS,EAAA;AACX,QAAA,MAAM,eAAe,EAAE,GAAG,MAAM,CAAG,EAAA,WAAA,CAAY,YAAY,CAAG,EAAA,CAAA,EAAG,YAAY,WAAY,CAAA,CAAA,EAAG,GAAG,WAAY,CAAA,SAAA,CAAU,GAAG,CAAG,EAAA,WAAA,CAAY,UAAU,CAAE,EAAA;AACnJ,QAAM,MAAA,OAAA,GAAU,EAAE,GAAG,IAAM,EAAA,CAAA,EAAG,IAAM,EAAA,CAAA,EAAG,IAAM,EAAA,CAAA,EAAG,IAAM,EAAA,CAAA,EAAG,IAAK,EAAA;AAC9D,QAAA,QAAA,CAAS,SAAW,EAAA,YAAA,EAAc,OAAS,EAAA,OAAA,EAAS,GAAG,OAAO,CAAA;AAAA;AAChE;AACF,GACF,EAAG,CAAC,WAAA,EAAa,MAAQ,EAAA,cAAA,EAAgB,MAAM,SAAW,EAAA,GAAA,EAAK,MAAQ,EAAA,QAAQ,CAAC,CAAA;AAGhF,EAAM,MAAA,eAAA,GAAkBD,wBAAY,CAAA,CAAC,CAAkB,KAAA;AAGrD,IAAA,MAAM,cAAc,MAAO,CAAA,IAAA,CAAK,OAAK,CAAE,CAAA,EAAA,KAAO,YAAY,WAAW,CAAA;AACrE,IAAI,IAAA,WAAA,IAAe,YAAgB,IAAA,WAAA,CAAY,WAAa,EAAA;AAC1D,MAAA,MAAM,UAAU,YAAa,CAAA,OAAA,EAAS,cAAc,CAAkB,eAAA,EAAA,WAAA,CAAY,WAAW,CAAI,EAAA,CAAA,CAAA;AACjG,MAAA,IAAI,OAAS,EAAA;AACX,QAAA,MAAM,eAAe,EAAE,GAAG,aAAa,CAAG,EAAA,WAAA,CAAY,YAAY,CAAG,EAAA,CAAA,EAAG,YAAY,WAAY,CAAA,CAAA,EAAG,GAAG,WAAY,CAAA,SAAA,CAAU,GAAG,CAAG,EAAA,WAAA,CAAY,UAAU,CAAE,EAAA;AAC1J,QAAA,YAAA,CAAa,MAAQ,EAAA,YAAA,EAAc,WAAa,EAAA,WAAA,EAAa,GAAG,OAAO,CAAA;AAAA;AACzE;AAGF,IAAA,YAAA,CAAa,MAAM,CAAA;AAEnB,IAAe,cAAA,CAAA;AAAA,MACb,UAAY,EAAA,KAAA;AAAA,MACZ,WAAa,EAAA,IAAA;AAAA,MACb,YAAc,EAAA,IAAA;AAAA,MACd,SAAW,EAAA,EAAE,CAAG,EAAA,CAAA,EAAG,GAAG,CAAE,EAAA;AAAA,MACxB,QAAU,EAAA,EAAE,CAAG,EAAA,CAAA,EAAG,GAAG,CAAE;AAAA,KACxB,CAAA;AAAA,KACA,CAAC,WAAA,EAAa,MAAQ,EAAA,YAAA,EAAc,YAAY,CAAC,CAAA;AAGpD,EAAAD,sBAAA,CAAU,MAAM;AACd,IAAA,IAAI,UAAU,UAAY,EAAA;AACxB,MAAS,QAAA,CAAA,gBAAA,CAAiB,aAAa,cAAc,CAAA;AACrD,MAAS,QAAA,CAAA,gBAAA,CAAiB,WAAW,aAAa,CAAA;AAClD,MAAS,QAAA,CAAA,IAAA,CAAK,MAAM,MAAS,GAAA,UAAA;AAC7B,MAAS,QAAA,CAAA,IAAA,CAAK,MAAM,UAAa,GAAA,MAAA;AAEjC,MAAA,OAAO,MAAM;AACX,QAAS,QAAA,CAAA,mBAAA,CAAoB,aAAa,cAAc,CAAA;AACxD,QAAS,QAAA,CAAA,mBAAA,CAAoB,WAAW,aAAa,CAAA;AACrD,QAAS,QAAA,CAAA,IAAA,CAAK,MAAM,MAAS,GAAA,EAAA;AAC7B,QAAS,QAAA,CAAA,IAAA,CAAK,MAAM,UAAa,GAAA,EAAA;AAAA,OACnC;AAAA;AAGF,IAAO,OAAA,KAAA,CAAA;AAAA,KACN,CAAC,SAAA,CAAU,UAAY,EAAA,cAAA,EAAgB,aAAa,CAAC,CAAA;AAExD,EAAAA,sBAAA,CAAU,MAAM;AACd,IAAA,IAAI,YAAY,UAAY,EAAA;AAC1B,MAAS,QAAA,CAAA,gBAAA,CAAiB,aAAa,gBAAgB,CAAA;AACvD,MAAS,QAAA,CAAA,gBAAA,CAAiB,WAAW,eAAe,CAAA;AACpD,MAAS,QAAA,CAAA,IAAA,CAAK,MAAM,UAAa,GAAA,MAAA;AAEjC,MAAA,OAAO,MAAM;AACX,QAAS,QAAA,CAAA,mBAAA,CAAoB,aAAa,gBAAgB,CAAA;AAC1D,QAAS,QAAA,CAAA,mBAAA,CAAoB,WAAW,eAAe,CAAA;AACvD,QAAS,QAAA,CAAA,IAAA,CAAK,MAAM,UAAa,GAAA,EAAA;AAAA,OACnC;AAAA;AAGF,IAAO,OAAA,KAAA,CAAA;AAAA,KACN,CAAC,WAAA,CAAY,UAAY,EAAA,gBAAA,EAAkB,eAAe,CAAC,CAAA;AAG9D,EAAA,MAAM,cAAiB,GAAA,MAAA,GAAS,MAAO,CAAA,CAAC,CAAI,GAAA,GAAA;AAC5C,EAAM,MAAA,OAAA,GAAU,OAAO,GAAI,CAAA,CAAA,IAAA,KAAA,CAAS,KAAK,CAAI,GAAA,IAAA,CAAK,CAAM,KAAA,SAAA,GAAY,cAAe,CAAA,CAAA;AACnF,EAAM,MAAA,gBAAA,GAAmB,QAAQ,MAAS,GAAA,CAAA,GAAI,KAAK,GAAI,CAAA,GAAG,OAAO,CAAI,GAAA,CAAA;AAGrE,EAAM,MAAA,UAAA,GAAa,WAAW,gBAAmB,GAAA,KAAA,CAAA;AAEjD,EACE,uBAAAG,2BAAA;AAAA,IAAC,KAAA;AAAA,IAAA;AAAA,MACC,GAAK,EAAA,YAAA;AAAA,MACL,SAAW,EAAA,EAAA;AAAA,QACT,+BAAA;AAAA,QACA,UAAU,UAAc,IAAA,aAAA;AAAA,QACxB;AAAA,OACF;AAAA,MACA,KAAO,EAAA;AAAA,QACL,GAAI,eAAe,KAAa,CAAA,IAAA,EAAE,WAAW,UAAa,GAAA,gBAAA,CAAiB,CAAC,CAAA,GAAI,CAAE,EAAA;AAAA,QAClF,OAAA,EAAS,GAAG,gBAAiB,CAAA,CAAC,CAAC,CAAM,GAAA,EAAA,gBAAA,CAAiB,CAAC,CAAC,CAAA,EAAA,CAAA;AAAA,QACxD,GAAG;AAAA,OACL;AAAA,MAGC,QAAA,EAAA;AAAA,QAAA,MAAA,CAAO,IAAI,CAAQ,IAAA,KAAA;AAClB,UAAM,MAAA,UAAA,GAAa,SAAU,CAAA,WAAA,KAAgB,IAAK,CAAA,EAAA;AAClD,UAAA,IAAI,WAAW,gBAAiB,CAAA,IAAA,EAAM,MAAM,SAAW,EAAA,GAAA,EAAK,gBAAgB,MAAM,CAAA;AAGlF,UAAA,IAAI,UAAc,IAAA,SAAA,CAAU,eAAmB,IAAA,YAAA,CAAa,OAAS,EAAA;AACnE,YAAM,MAAA,aAAA,GAAgB,YAAa,CAAA,OAAA,CAAQ,qBAAsB,EAAA;AACjE,YAAW,QAAA,GAAA;AAAA,cACT,GAAG,QAAA;AAAA,cACH,IAAA,EAAM,SAAU,CAAA,eAAA,CAAgB,CAAI,GAAA,aAAA,CAAc,OAAO,SAAU,CAAA,UAAA,CAAW,CAAI,GAAA,gBAAA,CAAiB,CAAC,CAAA;AAAA,cACpG,GAAA,EAAK,SAAU,CAAA,eAAA,CAAgB,CAAI,GAAA,aAAA,CAAc,MAAM,SAAU,CAAA,UAAA,CAAW,CAAI,GAAA,gBAAA,CAAiB,CAAC;AAAA,aACpG;AAAA;AAGF,UACE,uBAAAA,2BAAA;AAAA,YAAC,iBAAA;AAAA,YAAA;AAAA,cAEC,IAAA;AAAA,cACA,QAAA;AAAA,cACA,UAAA;AAAA,cACA,UAAA,EAAY,WAAY,CAAA,WAAA,KAAgB,IAAK,CAAA,EAAA;AAAA,cAC7C,WAAA,EAAa,WAAe,IAAA,IAAA,CAAK,WAAgB,KAAA,KAAA;AAAA,cACjD,WAAA,EAAa,WAAe,IAAA,IAAA,CAAK,WAAgB,KAAA,KAAA;AAAA,cACjD,aAAA;AAAA,cACA,eAAA;AAAA,cACA,WAAa,EAAA,eAAA;AAAA,cACb,aAAe,EAAA,iBAAA;AAAA,cAEd,mBAAS,IAAI;AAAA,aAAA;AAAA,YAZT,IAAK,CAAA,EAAA;AAAA,YADZ,KAAA;AAAA,YAAA;AAAA,cAAA,QAAA,EAAA,4GAAA;AAAA,cAAA,UAAA,EAAA,GAAA;AAAA,cAAA,YAAA,EAAA;AAAA,aAAA;AAAA,YAAAC;AAAA,WAcA;AAAA,SAEH,CAAA;AAAA,QAGA,SAAA,CAAU,UAAc,IAAA,SAAA,CAAU,WACjC,oBAAAD,2BAAA;AAAA,UAAC,KAAA;AAAA,UAAA;AAAA,YACC,SAAU,EAAA,qEAAA;AAAA,YACV,KAAO,EAAA;AAAA,cACL,GAAG,iBAAiB,SAAU,CAAA,WAAA,EAAa,MAAM,SAAW,EAAA,GAAA,EAAK,gBAAgB,MAAM,CAAA;AAAA,cACvF,MAAQ,EAAA,CAAA;AAAA,cACR,UAAY,EAAA,0BAAA;AAAA,cACZ,MAAQ,EAAA,8BAAA;AAAA,cACR,SAAW,EAAA;AAAA;AACb,WAAA;AAAA,UARF,KAAA,CAAA;AAAA,UAAA,KAAA;AAAA,UAAA;AAAA,YAAA,QAAA,EAAA,4GAAA;AAAA,YAAA,UAAA,EAAA,GAAA;AAAA,YAAA,YAAA,EAAA;AAAA,WAAA;AAAA,UAAAC;AAAA,SASA;AAAA,QAID,WAAY,CAAA,UAAA,IAAc,WAAY,CAAA,WAAA,IAAA,CAAgB,MAAM;AAC3D,UAAA,MAAM,cAAc,MAAO,CAAA,IAAA,CAAK,OAAK,CAAE,CAAA,EAAA,KAAO,YAAY,WAAW,CAAA;AACrE,UAAI,IAAA,CAAC,aAAoB,OAAA,IAAA;AAEzB,UACE,uBAAAD,2BAAA;AAAA,YAAC,KAAA;AAAA,YAAA;AAAA,cACC,SAAU,EAAA,qEAAA;AAAA,cACV,KAAO,EAAA;AAAA,gBACL,GAAG,gBAAiB,CAAA,WAAA,EAAa,MAAM,SAAW,EAAA,GAAA,EAAK,gBAAgB,MAAM,CAAA;AAAA,gBAC7E,MAAQ,EAAA,CAAA;AAAA,gBACR,UAAY,EAAA,yBAAA;AAAA,gBACZ,MAAQ,EAAA,8BAAA;AAAA,gBACR,SAAW,EAAA;AAAA;AACb,aAAA;AAAA,YARF,KAAA,CAAA;AAAA,YAAA,KAAA;AAAA,YAAA;AAAA,cAAA,QAAA,EAAA,4GAAA;AAAA,cAAA,UAAA,EAAA,GAAA;AAAA,cAAA,YAAA,EAAA;AAAA,aAAA;AAAA,YAAAC;AAAA,WASA;AAAA,SAED,GAAA;AAAA,QAGF,YAAA,IAAgB,CAAC,SAAA,CAAU,UAC1B,oBAAAD,2BAAA;AAAA,UAAC,KAAA;AAAA,UAAA;AAAA,YACC,SAAU,EAAA,qIAAA;AAAA,YACV,KAAO,EAAA;AAAA,cACL,KAAS,EAAA,CAAA,YAAA,CAAa,CAAK,IAAA,CAAA,IAAK,iBAAiB,IAAQ,GAAA,GAAA;AAAA,cACzD,MAAU,EAAA,CAAA,YAAA,CAAa,CAAK,IAAA,CAAA,IAAK,SAAa,GAAA,GAAA;AAAA,cAC9C,IAAA,EAAM,iBAAiB,CAAC,CAAA;AAAA,cACxB,GAAA,EAAK,iBAAiB,CAAC;AAAA,aACzB;AAAA,YAEA,QAAC,kBAAAA,2BAAA,CAAA,MAAA,EAAA,EAAK,SAAU,EAAA,2BAAA,EAA4B,QAA5C,EAAA,WAAA,EAAA,EAAA,KAAA,CAAA,EAAA,KAAA,EAAA;AAAA,cAAA,QAAA,EAAA,4GAAA;AAAA,cAAA,UAAA,EAAA,GAAA;AAAA,cAAA,YAAA,EAAA;AAAA,aAAqD,EAAAC,SAAA;AAAA,WAAA;AAAA,UATvD,KAAA,CAAA;AAAA,UAAA,KAAA;AAAA,UAAA;AAAA,YAAA,QAAA,EAAA,4GAAA;AAAA,YAAA,UAAA,EAAA,GAAA;AAAA,YAAA,YAAA,EAAA;AAAA,WAAA;AAAA,UAAAA;AAAA;AAUA;AAAA,KAAA;AAAA,IA5FJ,KAAA,CAAA;AAAA,IAAA,IAAA;AAAA,IAAA;AAAA,MAAA,QAAA,EAAA,4GAAA;AAAA,MAAA,UAAA,EAAA,GAAA;AAAA,MAAA,YAAA,EAAA;AAAA,KAAA;AAAA,IAAAA;AAAA,GA8FA;AAEJ;;;;"}